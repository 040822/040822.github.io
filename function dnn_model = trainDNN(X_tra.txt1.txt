 % 定义深度神经网络模型
    layers = [ 
        imageInputLayer（[size（X_train，2），1，1]）
        fullyConnectedLayer(64)
        reluLayer
        fullyConnectedLayer(32)
        reluLayer
        fullyConnectedLayer(1)
        regressionLayer];
    
    % 设置训练选项
    options = trainingOptions('adam', 'MaxEpochs', 100, 'MiniBatchSize', 32, 'Verbose', false);
    
    % 训练深度神经网络模型
    dnn_model = trainNetwork(X_train, y_train, layers, options);
% 原始数据
data = [
1, 8.33, 45, 90, 193, 45, 91, 193, 46, 89, 191, 45, 90, 193;
2, 8.37, 43, 52, 184, 42, 51, 184, 43, 51, 182, 43, 51, 184;
3, 8.74, 42, 57, 176, 42, 57, 176, 42, 57, 176, 42, 57, 176;
4, 9.04, 40, 42, 156, 39, 42, 156, 41, 42, 156, 41, 42, 156;
5, 8.92, 35, 32, 145, 36, 31, 145, 35, 30, 144, 35, 31, 145;
6, 8.98, 37, 37, 148, 37, 37, 147, 37, 37, 148, 37, 37, 148;
7, 8.95, 32, 30, 186, 32, 28, 186, 31, 29, 186, 32, 29, 186;
8, 8.66, 39, 37, 171, 39, 38, 171, 39, 37, 165, 39, 37, 171;
9, 9.11, 32, 30, 169, 32, 30, 169, 34, 29, 161, 32, 30, 169;
10, 7.02, 42, 78, 100, 42, 79, 100, 40, 78, 101, 42, 78, 100;
11, 6.99, 41, 52, 89, 42, 56, 89, 41, 56, 89, 41, 56, 89;
12, 6.98, 40, 66, 95, 42, 65, 95, 42, 65, 95, 42, 65, 95
];



% 提取特征矩阵 X
X_train = data(:, 2:end-1);



% 提取目标变量 Y
y_train = data(:, end);
dnn_model = trainNetwork(X_train,y_train,layers,opyions);

% 拆分数据集为训练集和测试集
train_ratio = 0.8; % 训练集比例
num_samples = size(data, 1);
num_train = round(train_ratio * num_samples);



% 打乱数据集的顺序
idx = randperm(num_samples);
data_shuffled = data(idx, :);



% 划分训练集和测试集
train_data = data_shuffled(1:num_train, :);
test_data = data_shuffled(num_train+1:end, :);



% 训练集特征矩阵和目标变量
X_train = train_data(:, 2:end-3);
y_train = train_data(:, end);



% 测试集特征矩阵和目标变量
X_test = test_data(:, 2:end-3);
y_test = test_data(:, end);
% 建立基础模型
svm_model = fitrsvm(X_train, y_train); % 支持向量机
rf_model = TreeBagger(50, X_train, y_train); % 随机森林
dnn_model = trainDNN(X_train, y_train); % 深度神经网络
lstm_model = trainLSTM(X_train, y_train); % 长短期记忆网络
cnn_model = trainCNN(X_train, y_train); % 卷积神经网络
hmm_model = hmmtrain(X_train, y_train); % 隐马尔科夫模型
gpr_model = fitrgp(X_train, y_train); % 高斯过程回归
fa_model = fitcfa(X_train, y_train); % 因子分析
mcmc_model = trainMCMC(X_train, y_train); % 马尔科夫链蒙特卡洛
zp_model = fitZeroInflatedModel(X_train, y_train); % 零膨胀模型
sgd_model = trainSGD(X_train, y_train); % 随机梯度下降
nmf_model = fitNMF(X_train, y_train); % 非负矩阵分解
mdp_model = trainMDP(X_train, y_train); % 马尔科夫决策过程
dimred_model = fitDimReduction(X_train, y_train); % 高维数据降维算法
gmm_model = fitgmdist(X_train, y_train); % 高斯混合模型
ga_model = trainGA(X_train, y_train); % 遗传算法
reg_model = fitRegression(X_train, y_train); % 回归模型

% 针对模型进行预测
svm_train_pred = predict(svm_model, X_train);
rf_train_pred = predict(rf_model, X_train);
dnn_train_pred = predict(dnn_model, X_train);
lstm_train_pred = predict(lstm_model, X_train);
cnn_train_pred = predict(cnn_model, X_train);
hmm_train_pred = hmmdecode(hmm_model, X_train);
gpr_train_pred = predict(gpr_model, X_train);
fa_train_pred = predict(fa_model, X_train);
mcmc_train_pred = generateMCMCSamples(mcmc_model, X_train);
zp_train_pred = predict(zp_model, X_train);
sgd_train_pred = predict(sgd_model, X_train);
nmf_train_pred = predict(nmf_model, X_train);
mdp_train_pred = predict(mdp_model, X_train);
dimred_train_pred = predict(dimred_model, X_train);
gmm_train_pred = cluster(gmm_model, X_train);
ga_train_pred = predictGA(ga_model, X_train);
reg_train_pred = predict(reg_model, X_train);

% 构建元特征矩阵
meta_features_train = [svm_train_pred, rf_train_pred, dnn_train_pred, lstm_train_pred, cnn_train_pred, hmm_train_pred, gpr_train_pred, fa_train_pred, mcmc_train_pred, zp_train_pred, sgd_train_pred, nmf_train_pred, mdp_train_pred, dimred_train_pred, gmm_train_pred, ga_train_pred, reg_train_pred];

% 对测试集进行预测，构建元特征矩阵 meta_features_test

% 训练元模型
meta_model = fitRegression(meta_features_train, y_train);

% 在测试集上进行预测
ensemble_pred = predict(meta_model, meta_features_test); 